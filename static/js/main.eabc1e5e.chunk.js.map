{"version":3,"sources":["logo.svg","components/DumbPage/DumbPage.js","App.js","serviceWorker.js","store/actions.js","store/reducers.js","store/index.js","i18n.js","index.js"],"names":["module","exports","DumbPage","changeLanguage","t","useTranslation","className","src","alt","onClick","placeholder","href","Page","i18n","lng","Loader","logo","Boolean","window","location","hostname","match","device","type","payload","initialState","combineReducers","state","action","actions","Object","assign","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","use","XHR","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","md","MobileDetect","navigator","userAgent","isMobile","mobile","dispatch","storeActions","ReactDOM","render","fallback","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,6OC2D5BC,MAtDf,YAAwC,IAAnBC,EAAkB,EAAlBA,eAEXC,EAAMC,cAAND,EAER,OACE,yBAAKE,UAAU,cACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,eACb,0BAAMA,UAAU,oBAAhB,SAEF,yBAAKA,UAAU,gBACb,sCACA,sCACA,uCAEF,yBAAKA,UAAU,kBACb,wCAGJ,0BAAMA,UAAU,QACd,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,MAAMC,IAAI,oIAAoIC,IAAI,mBAGrK,yBAAKF,UAAU,gBACb,8BAAOF,EAAE,mBAGb,yBAAKE,UAAU,iCACb,4BAAQG,QAAS,kBAAMN,EAAe,QAAtC,MACA,4BAAQM,QAAS,kBAAMN,EAAe,QAAtC,OAEF,yBAAKG,UAAU,6BAAf,eACA,yBAAKA,UAAU,8BAAf,gBACA,yBAAKA,UAAU,6BAAf,gBAEF,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,gBACb,2BAAOA,UAAU,aAAaI,YAAY,wBAE5C,yBAAKJ,UAAU,mBACb,4BACE,4BAAI,uBAAGK,KAAK,oBAAR,sBACJ,4BAAI,uBAAGA,KAAK,kCAAR,4BACJ,4BAAI,uBAAGA,KAAK,oCAAR,gBC3ChB,SAASC,IAAS,IACRC,EAASR,cAATQ,KAMR,OACE,kBAAC,EAAD,CAAUV,eALW,SAAAW,GACrBD,EAAKV,eAAeW,MASxB,IAAMC,EAAS,kBACb,yBAAKT,UAAU,OACb,yBAAKC,IAAKS,IAAMV,UAAU,WAAWE,IAAI,SACzC,6C,MCVgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXS,EAPG,SAAAC,GAChB,MAAO,CACLC,KAJe,aAKfC,QAASF,IAIE,EATI,aCIbG,EAAe,CACnBH,OAAQ,WAcKI,cAAgB,CAC7BJ,OAZoB,WAAmC,IAAlCK,EAAiC,uDAAzBF,EAAcG,EAAW,uCACtD,OAAQA,EAAOL,MACb,KAAKM,EACH,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC9BL,OAAQM,EAAOJ,UAEnB,QACE,OAAOG,MCJEK,EALDC,YACZC,EACAhB,OAAOiB,8BAAgCjB,OAAOiB,gC,wBCHhDtB,IACGuB,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACJC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,KAiBJ/B,EAAf,EAAeA,ICnBTgC,EAAK,IAAIC,IAAa5B,OAAO6B,UAAUC,WACvCC,EAAWhC,QAAQ4B,EAAGK,UAE5BlB,EAAMmB,SAASC,EAAuBH,EAAW,SAAW,YAE5DI,IAASC,OACP,kBAAC,IAAD,CAAUtB,MAAOA,GACf,mBNUW,WACb,OACE,kBAAC,WAAD,CAAUuB,SAAU,kBAAC,EAAD,OAClB,kBAAC3C,EAAD,SMbF,OAEF4C,SAASC,eAAe,SL8GpB,kBAAmBV,WACrBA,UAAUW,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eabc1e5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport './style.css'\r\n\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nfunction DumbPage ({ changeLanguage }) {\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div className='main-block'>\r\n      <header className='header'>\r\n        <div className='header-logo'>\r\n          <span className='header-logo-text'>Logo</span>\r\n        </div>\r\n        <div className='header-links'>\r\n          <a>Link#1 </a>\r\n          <a>Link#2 </a>\r\n          <a>Link#3 </a>\r\n        </div>\r\n        <div className='header-profile'>\r\n          <a>Profile</a>\r\n        </div>\r\n      </header>\r\n      <main className='main'>\r\n        <div className='profile-block content-block'>\r\n          <div className='profile-img'>\r\n            <div className='img-block'>\r\n              <img className='img' src='https://i0.wp.com/www.gottabemobile.com/wp-content/uploads/2018/09/How-to-Use-Memoji-iOS-12-iPhone-Xs-1.jpg?fit=1027%2C1027&ssl=1' alt='ProfilePhoto' />\r\n            </div>\r\n          </div>\r\n          <div className='profile-info'>\r\n            <span>{t('profile.text')}</span>\r\n          </div>\r\n        </div>\r\n        <div className='something-block content-block'>\r\n          <button onClick={() => changeLanguage('ru')}>ru</button>\r\n          <button onClick={() => changeLanguage('en')}>en</button>\r\n        </div>\r\n        <div className='third-block content-block'>Third block</div>\r\n        <div className='fourth-block content-block'>Fourth block</div>\r\n        <div className='fifth-block content-block'>Fifth block</div>\r\n      </main>\r\n      <footer className='footer'>\r\n        <div className='footer-email'>\r\n          <input className='input-form' placeholder='Send me a message!' />\r\n        </div>\r\n        <div className='footer-contacts'>\r\n          <ul>\r\n            <li><a href='tel:+79045133706'>+7(904)-513-37-06</a></li>\r\n            <li><a href='mailto:maxpavlov9991@gmail.com'>maxpavlov9991@gmail.com</a></li>\r\n            <li><a href='https://github.com/maxpavlov9991'>GitHub</a></li>\r\n          </ul>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DumbPage\r\n","import React, { Suspense } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport { DumbPage } from './components/DumbPage'\r\n\r\n// page uses the hook\r\nfunction Page () {\r\n  const { i18n } = useTranslation()\r\n\r\n  const changeLanguage = lng => {\r\n    i18n.changeLanguage(lng)\r\n  }\r\n\r\n  return (\r\n    <DumbPage changeLanguage={changeLanguage} />\r\n  )\r\n}\r\n\r\n// loading component for suspense fallback\r\nconst Loader = () => (\r\n  <div className='App'>\r\n    <img src={logo} className='App-logo' alt='logo' />\r\n    <div>loading...</div>\r\n  </div>\r\n)\r\n\r\n// here app catches the suspense from page in case translations are not yet loaded\r\nexport default function App () {\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <Page />\r\n    </Suspense>\r\n  )\r\n}\r\n","/* eslint no-undef: 0 */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","const SET_DEVICE = 'SET_DEVICE'\r\n\r\nconst setDevice = device => {\r\n  return {\r\n    type: SET_DEVICE,\r\n    payload: device\r\n  }\r\n}\r\n\r\nexport default {\r\n  setDevice,\r\n  SET_DEVICE\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport actions from './actions'\r\n\r\nconst initialState = {\r\n  device: 'desktop'\r\n}\r\n\r\nconst deviceReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.SET_DEVICE:\r\n      return Object.assign({}, state, {\r\n        device: action.payload\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  device: deviceReducer\r\n})\r\n","import { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\n\r\nexport { default as actions } from './actions'\r\nexport { default as reducers } from './reducers'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nexport default store\r\n","import i18n from 'i18next'\r\nimport XHR from 'i18next-xhr-backend'\r\nimport LanguageDetector from 'i18next-browser-languagedetector'\r\nimport { initReactI18next } from 'react-i18next'\r\n\r\ni18n\r\n  .use(XHR)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next) // bind react-i18next to the instance\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n\r\n    interpolation: {\r\n      escapeValue: false // not needed for react!!\r\n    }\r\n\r\n    // react i18next special options (optional)\r\n    // override if needed - omit if ok with defaults\r\n    /*\r\n    react: {\r\n      bindI18n: 'languageChanged',\r\n      bindI18nStore: '',\r\n      transEmptyNodeValue: '',\r\n      transSupportBasicHtmlNodes: true,\r\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'i'],\r\n      useSuspense: true,\r\n    }\r\n    */\r\n  })\r\n\r\nexport default i18n\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport ReactDOM from 'react-dom'\r\nimport MobileDetect from 'mobile-detect'\r\n\r\nimport App from './App'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport store, { actions as storeActions } from './store'\r\n// import i18n (needs to be bundled ;))\r\nimport './i18n'\r\n\r\nconst md = new MobileDetect(window.navigator.userAgent)\r\nconst isMobile = Boolean(md.mobile())\r\n\r\nstore.dispatch(storeActions.setDevice(isMobile ? 'mobile' : 'desktop'))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}